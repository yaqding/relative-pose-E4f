// mex solver_e4f_polyeig.cpp
#include <vector>
#include <iostream>
#include <numeric>
#include <Eigen/Dense>
#include "mex.h"
#include "matrix.h"

using namespace Eigen;

MatrixXd solver_e4f_polyeig(const VectorXd &data)
{
    // Compute coefficients
    const double *p = data.data();
    
    
    double b1 = p[0];
    double b2 = p[1];
    double b3 = p[2];
    double b4 = p[3];
    double b5 = p[4];
    double b6 = p[5];
    double b7 = p[6];

    Eigen::Matrix<double, 3, 4> q1;
    q1 << p[7], p[8], p[9], p[10],
        p[11], p[12], p[13], p[14],
        1, 1, 1, 1;




    Eigen::Matrix<double, 3, 4> q2;
    q2 << p[15], p[16], p[17], p[18],
        p[19], p[20], p[21], p[22],
        p[23], p[24], p[25], p[26];
    
    
    Eigen::MatrixXd M = MatrixXd::Zero(4, 18);
    
    for (int i = 0; i < 4; ++i)
    {
        M(i, 0) = q2(1, i) - q1(1, i) * q2(2, i);
        M(i, 1) = -2 * q1(0, i) * q2(1, i);
        M(i, 2) = -q2(1, i) - q1(1, i) * q2(2, i);
        M(i, 3) = b4 - b7 * q1(1, i);
        M(i, 4) = -2 * b4 * q1(0, i);
        M(i, 5) = -b4 - b7 * q1(1, i);
        M(i, 6) = q1(0, i) * q2(2, i) - q2(0, i);
        M(i, 7) = 2 * q2(2, i) + 2 * q1(0, i) * q2(0, i);
        M(i, 8) = q2(0, i) - q1(0, i) * q2(2, i);
        M(i, 9) = b7 * q1(0, i);
        M(i, 10) = 2 * b7;
        M(i, 11) = -b7 * q1(0, i);
        M(i, 12) = q1(1, i) * q2(0, i) - q1(0, i) * q2(1, i);
        M(i, 13) = -2 * q2(1, i);
        M(i, 14) = q1(0, i) * q2(1, i) + q1(1, i) * q2(0, i);
        M(i, 15) = -b4 * q1(0, i);
        M(i, 16) = -2 * b4;
        M(i, 17) = b4 * q1(0, i);
    };
    
    Eigen::MatrixXd N = MatrixXd::Zero(3, 18);
    N.row(0) = M.row(1);
    N.row(1) = M.row(2);
    N.row(2) = M.row(3);
    Eigen::MatrixXd D = MatrixXd::Zero(3, 9);
    D << N(0, 0) * N(2, 14) + N(0, 1) * N(2, 13) + N(0, 2) * N(2, 12) - N(0, 12) * N(2, 2) - N(0, 13) * N(2, 1) - N(0, 14) * N(2, 0) - N(0, 2) * N(2, 14) + N(0, 14) * N(2, 2), N(0, 1) * N(2, 14) + N(0, 2) * N(2, 13) - N(0, 13) * N(2, 2) - N(0, 14) * N(2, 1), N(0, 2) * N(2, 14) - N(0, 14) * N(2, 2), N(0, 0) * N(2, 17) + N(0, 1) * N(2, 16) + N(0, 2) * N(2, 15) + N(0, 3) * N(2, 14) + N(0, 4) * N(2, 13) + N(0, 5) * N(2, 12) - N(0, 12) * N(2, 5) - N(0, 13) * N(2, 4) - N(0, 14) * N(2, 3) - N(0, 15) * N(2, 2) - N(0, 16) * N(2, 1) - N(0, 17) * N(2, 0) - N(0, 2) * N(2, 17) - N(0, 5) * N(2, 14) + N(0, 14) * N(2, 5) + N(0, 17) * N(2, 2), N(0, 1) * N(2, 17) + N(0, 2) * N(2, 16) + N(0, 4) * N(2, 14) + N(0, 5) * N(2, 13) - N(0, 13) * N(2, 5) - N(0, 14) * N(2, 4) - N(0, 16) * N(2, 2) - N(0, 17) * N(2, 1), N(0, 2) * N(2, 17) + N(0, 5) * N(2, 14) - N(0, 14) * N(2, 5) - N(0, 17) * N(2, 2), N(0, 3) * N(2, 17) + N(0, 4) * N(2, 16) + N(0, 5) * N(2, 15) - N(0, 15) * N(2, 5) - N(0, 16) * N(2, 4) - N(0, 17) * N(2, 3) - N(0, 5) * N(2, 17) + N(0, 17) * N(2, 5), N(0, 4) * N(2, 17) + N(0, 5) * N(2, 16) - N(0, 16) * N(2, 5) - N(0, 17) * N(2, 4), N(0, 5) * N(2, 17) - N(0, 17) * N(2, 5),
            N(0, 12) * N(1, 2) - N(0, 1) * N(1, 13) - N(0, 2) * N(1, 12) - N(0, 0) * N(1, 14) + N(0, 13) * N(1, 1) + N(0, 14) * N(1, 0) + N(0, 2) * N(1, 14) - N(0, 14) * N(1, 2), N(0, 13) * N(1, 2) - N(0, 2) * N(1, 13) - N(0, 1) * N(1, 14) + N(0, 14) * N(1, 1), N(0, 14) * N(1, 2) - N(0, 2) * N(1, 14), N(0, 12) * N(1, 5) - N(0, 1) * N(1, 16) - N(0, 2) * N(1, 15) - N(0, 3) * N(1, 14) - N(0, 4) * N(1, 13) - N(0, 5) * N(1, 12) - N(0, 0) * N(1, 17) + N(0, 13) * N(1, 4) + N(0, 14) * N(1, 3) + N(0, 15) * N(1, 2) + N(0, 16) * N(1, 1) + N(0, 17) * N(1, 0) + N(0, 2) * N(1, 17) + N(0, 5) * N(1, 14) - N(0, 14) * N(1, 5) - N(0, 17) * N(1, 2), N(0, 13) * N(1, 5) - N(0, 2) * N(1, 16) - N(0, 4) * N(1, 14) - N(0, 5) * N(1, 13) - N(0, 1) * N(1, 17) + N(0, 14) * N(1, 4) + N(0, 16) * N(1, 2) + N(0, 17) * N(1, 1), N(0, 14) * N(1, 5) - N(0, 5) * N(1, 14) - N(0, 2) * N(1, 17) + N(0, 17) * N(1, 2), N(0, 15) * N(1, 5) - N(0, 4) * N(1, 16) - N(0, 5) * N(1, 15) - N(0, 3) * N(1, 17) + N(0, 16) * N(1, 4) + N(0, 17) * N(1, 3) + N(0, 5) * N(1, 17) - N(0, 17) * N(1, 5), N(0, 16) * N(1, 5) - N(0, 5) * N(1, 16) - N(0, 4) * N(1, 17) + N(0, 17) * N(1, 4), N(0, 17) * N(1, 5) - N(0, 5) * N(1, 17),
            N(1, 12) * N(2, 2) - N(1, 1) * N(2, 13) - N(1, 2) * N(2, 12) - N(1, 0) * N(2, 14) + N(1, 13) * N(2, 1) + N(1, 14) * N(2, 0) + N(1, 2) * N(2, 14) - N(1, 14) * N(2, 2), N(1, 13) * N(2, 2) - N(1, 2) * N(2, 13) - N(1, 1) * N(2, 14) + N(1, 14) * N(2, 1), N(1, 14) * N(2, 2) - N(1, 2) * N(2, 14), N(1, 12) * N(2, 5) - N(1, 1) * N(2, 16) - N(1, 2) * N(2, 15) - N(1, 3) * N(2, 14) - N(1, 4) * N(2, 13) - N(1, 5) * N(2, 12) - N(1, 0) * N(2, 17) + N(1, 13) * N(2, 4) + N(1, 14) * N(2, 3) + N(1, 15) * N(2, 2) + N(1, 16) * N(2, 1) + N(1, 17) * N(2, 0) + N(1, 2) * N(2, 17) + N(1, 5) * N(2, 14) - N(1, 14) * N(2, 5) - N(1, 17) * N(2, 2), N(1, 13) * N(2, 5) - N(1, 2) * N(2, 16) - N(1, 4) * N(2, 14) - N(1, 5) * N(2, 13) - N(1, 1) * N(2, 17) + N(1, 14) * N(2, 4) + N(1, 16) * N(2, 2) + N(1, 17) * N(2, 1), N(1, 14) * N(2, 5) - N(1, 5) * N(2, 14) - N(1, 2) * N(2, 17) + N(1, 17) * N(2, 2), N(1, 15) * N(2, 5) - N(1, 4) * N(2, 16) - N(1, 5) * N(2, 15) - N(1, 3) * N(2, 17) + N(1, 16) * N(2, 4) + N(1, 17) * N(2, 3) + N(1, 5) * N(2, 17) - N(1, 17) * N(2, 5), N(1, 16) * N(2, 5) - N(1, 5) * N(2, 16) - N(1, 4) * N(2, 17) + N(1, 17) * N(2, 4), N(1, 17) * N(2, 5) - N(1, 5) * N(2, 17);
    
    Eigen::MatrixXd D2 = MatrixXd::Zero(3, 15);
    Eigen::MatrixXd D21 = MatrixXd::Zero(1, 15);
    D21 << N(1, 6) * D(0, 0), N(1, 6) * D(0, 1) + N(1, 7) * D(0, 0), N(1, 6) * D(0, 2) + N(1, 7) * D(0, 1) + N(1, 8) * D(0, 0), N(1, 7) * D(0, 2) + N(1, 8) * D(0, 1), N(1, 8) * D(0, 2), N(1, 6) * D(0, 3) + N(1, 9) * D(0, 0), N(1, 6) * D(0, 4) + N(1, 7) * D(0, 3) + N(1, 9) * D(0, 1) + N(1, 10) * D(0, 0), N(1, 6) * D(0, 5) + N(1, 7) * D(0, 4) + N(1, 8) * D(0, 3) + N(1, 9) * D(0, 2) + N(1, 10) * D(0, 1) + N(1, 11) * D(0, 0), N(1, 7) * D(0, 5) + N(1, 8) * D(0, 4) + N(1, 10) * D(0, 2) + N(1, 11) * D(0, 1), N(1, 8) * D(0, 5) + N(1, 11) * D(0, 2), N(1, 6) * D(0, 6) + N(1, 9) * D(0, 3), N(1, 6) * D(0, 7) + N(1, 7) * D(0, 6) + N(1, 9) * D(0, 4) + N(1, 10) * D(0, 3), N(1, 6) * D(0, 8) + N(1, 7) * D(0, 7) + N(1, 8) * D(0, 6) + N(1, 9) * D(0, 5) + N(1, 10) * D(0, 4) + N(1, 11) * D(0, 3), N(1, 7) * D(0, 8) + N(1, 8) * D(0, 7) + N(1, 10) * D(0, 5) + N(1, 11) * D(0, 4), N(1, 8) * D(0, 8) + N(1, 11) * D(0, 5);
    
    Eigen::MatrixXd D22 = MatrixXd::Zero(1, 15);
    D22 << N(2, 6) * D(1, 0), N(2, 6) * D(1, 1) + N(2, 7) * D(1, 0), N(2, 6) * D(1, 2) + N(2, 7) * D(1, 1) + N(2, 8) * D(1, 0), N(2, 7) * D(1, 2) + N(2, 8) * D(1, 1), N(2, 8) * D(1, 2), N(2, 6) * D(1, 3) + N(2, 9) * D(1, 0), N(2, 6) * D(1, 4) + N(2, 7) * D(1, 3) + N(2, 9) * D(1, 1) + N(2, 10) * D(1, 0), N(2, 6) * D(1, 5) + N(2, 7) * D(1, 4) + N(2, 8) * D(1, 3) + N(2, 9) * D(1, 2) + N(2, 10) * D(1, 1) + N(2, 11) * D(1, 0), N(2, 7) * D(1, 5) + N(2, 8) * D(1, 4) + N(2, 10) * D(1, 2) + N(2, 11) * D(1, 1), N(2, 8) * D(1, 5) + N(2, 11) * D(1, 2), N(2, 6) * D(1, 6) + N(2, 9) * D(1, 3), N(2, 6) * D(1, 7) + N(2, 7) * D(1, 6) + N(2, 9) * D(1, 4) + N(2, 10) * D(1, 3), N(2, 6) * D(1, 8) + N(2, 7) * D(1, 7) + N(2, 8) * D(1, 6) + N(2, 9) * D(1, 5) + N(2, 10) * D(1, 4) + N(2, 11) * D(1, 3), N(2, 7) * D(1, 8) + N(2, 8) * D(1, 7) + N(2, 10) * D(1, 5) + N(2, 11) * D(1, 4), N(2, 8) * D(1, 8) + N(2, 11) * D(1, 5);
    
    Eigen::MatrixXd D23 = MatrixXd::Zero(1, 15);
    D23 << N(0, 6) * D(2, 0), N(0, 6) * D(2, 1) + N(0, 7) * D(2, 0), N(0, 6) * D(2, 2) + N(0, 7) * D(2, 1) + N(0, 8) * D(2, 0), N(0, 7) * D(2, 2) + N(0, 8) * D(2, 1), N(0, 8) * D(2, 2), N(0, 6) * D(2, 3) + N(0, 9) * D(2, 0), N(0, 6) * D(2, 4) + N(0, 7) * D(2, 3) + N(0, 9) * D(2, 1) + N(0, 10) * D(2, 0), N(0, 6) * D(2, 5) + N(0, 7) * D(2, 4) + N(0, 8) * D(2, 3) + N(0, 9) * D(2, 2) + N(0, 10) * D(2, 1) + N(0, 11) * D(2, 0), N(0, 7) * D(2, 5) + N(0, 8) * D(2, 4) + N(0, 10) * D(2, 2) + N(0, 11) * D(2, 1), N(0, 8) * D(2, 5) + N(0, 11) * D(2, 2), N(0, 6) * D(2, 6) + N(0, 9) * D(2, 3), N(0, 6) * D(2, 7) + N(0, 7) * D(2, 6) + N(0, 9) * D(2, 4) + N(0, 10) * D(2, 3), N(0, 6) * D(2, 8) + N(0, 7) * D(2, 7) + N(0, 8) * D(2, 6) + N(0, 9) * D(2, 5) + N(0, 10) * D(2, 4) + N(0, 11) * D(2, 3), N(0, 7) * D(2, 8) + N(0, 8) * D(2, 7) + N(0, 10) * D(2, 5) + N(0, 11) * D(2, 4), N(0, 8) * D(2, 8) + N(0, 11) * D(2, 5);
    
    D2.row(0) = D21 + D22 + D23;
    
    N.row(0) = M.row(0);
    N.row(1) = M.row(2);
    N.row(2) = M.row(3);
    D << N(0, 0) * N(2, 14) + N(0, 1) * N(2, 13) + N(0, 2) * N(2, 12) - N(0, 12) * N(2, 2) - N(0, 13) * N(2, 1) - N(0, 14) * N(2, 0) - N(0, 2) * N(2, 14) + N(0, 14) * N(2, 2), N(0, 1) * N(2, 14) + N(0, 2) * N(2, 13) - N(0, 13) * N(2, 2) - N(0, 14) * N(2, 1), N(0, 2) * N(2, 14) - N(0, 14) * N(2, 2), N(0, 0) * N(2, 17) + N(0, 1) * N(2, 16) + N(0, 2) * N(2, 15) + N(0, 3) * N(2, 14) + N(0, 4) * N(2, 13) + N(0, 5) * N(2, 12) - N(0, 12) * N(2, 5) - N(0, 13) * N(2, 4) - N(0, 14) * N(2, 3) - N(0, 15) * N(2, 2) - N(0, 16) * N(2, 1) - N(0, 17) * N(2, 0) - N(0, 2) * N(2, 17) - N(0, 5) * N(2, 14) + N(0, 14) * N(2, 5) + N(0, 17) * N(2, 2), N(0, 1) * N(2, 17) + N(0, 2) * N(2, 16) + N(0, 4) * N(2, 14) + N(0, 5) * N(2, 13) - N(0, 13) * N(2, 5) - N(0, 14) * N(2, 4) - N(0, 16) * N(2, 2) - N(0, 17) * N(2, 1), N(0, 2) * N(2, 17) + N(0, 5) * N(2, 14) - N(0, 14) * N(2, 5) - N(0, 17) * N(2, 2), N(0, 3) * N(2, 17) + N(0, 4) * N(2, 16) + N(0, 5) * N(2, 15) - N(0, 15) * N(2, 5) - N(0, 16) * N(2, 4) - N(0, 17) * N(2, 3) - N(0, 5) * N(2, 17) + N(0, 17) * N(2, 5), N(0, 4) * N(2, 17) + N(0, 5) * N(2, 16) - N(0, 16) * N(2, 5) - N(0, 17) * N(2, 4), N(0, 5) * N(2, 17) - N(0, 17) * N(2, 5),
            N(0, 12) * N(1, 2) - N(0, 1) * N(1, 13) - N(0, 2) * N(1, 12) - N(0, 0) * N(1, 14) + N(0, 13) * N(1, 1) + N(0, 14) * N(1, 0) + N(0, 2) * N(1, 14) - N(0, 14) * N(1, 2), N(0, 13) * N(1, 2) - N(0, 2) * N(1, 13) - N(0, 1) * N(1, 14) + N(0, 14) * N(1, 1), N(0, 14) * N(1, 2) - N(0, 2) * N(1, 14), N(0, 12) * N(1, 5) - N(0, 1) * N(1, 16) - N(0, 2) * N(1, 15) - N(0, 3) * N(1, 14) - N(0, 4) * N(1, 13) - N(0, 5) * N(1, 12) - N(0, 0) * N(1, 17) + N(0, 13) * N(1, 4) + N(0, 14) * N(1, 3) + N(0, 15) * N(1, 2) + N(0, 16) * N(1, 1) + N(0, 17) * N(1, 0) + N(0, 2) * N(1, 17) + N(0, 5) * N(1, 14) - N(0, 14) * N(1, 5) - N(0, 17) * N(1, 2), N(0, 13) * N(1, 5) - N(0, 2) * N(1, 16) - N(0, 4) * N(1, 14) - N(0, 5) * N(1, 13) - N(0, 1) * N(1, 17) + N(0, 14) * N(1, 4) + N(0, 16) * N(1, 2) + N(0, 17) * N(1, 1), N(0, 14) * N(1, 5) - N(0, 5) * N(1, 14) - N(0, 2) * N(1, 17) + N(0, 17) * N(1, 2), N(0, 15) * N(1, 5) - N(0, 4) * N(1, 16) - N(0, 5) * N(1, 15) - N(0, 3) * N(1, 17) + N(0, 16) * N(1, 4) + N(0, 17) * N(1, 3) + N(0, 5) * N(1, 17) - N(0, 17) * N(1, 5), N(0, 16) * N(1, 5) - N(0, 5) * N(1, 16) - N(0, 4) * N(1, 17) + N(0, 17) * N(1, 4), N(0, 17) * N(1, 5) - N(0, 5) * N(1, 17),
            N(1, 12) * N(2, 2) - N(1, 1) * N(2, 13) - N(1, 2) * N(2, 12) - N(1, 0) * N(2, 14) + N(1, 13) * N(2, 1) + N(1, 14) * N(2, 0) + N(1, 2) * N(2, 14) - N(1, 14) * N(2, 2), N(1, 13) * N(2, 2) - N(1, 2) * N(2, 13) - N(1, 1) * N(2, 14) + N(1, 14) * N(2, 1), N(1, 14) * N(2, 2) - N(1, 2) * N(2, 14), N(1, 12) * N(2, 5) - N(1, 1) * N(2, 16) - N(1, 2) * N(2, 15) - N(1, 3) * N(2, 14) - N(1, 4) * N(2, 13) - N(1, 5) * N(2, 12) - N(1, 0) * N(2, 17) + N(1, 13) * N(2, 4) + N(1, 14) * N(2, 3) + N(1, 15) * N(2, 2) + N(1, 16) * N(2, 1) + N(1, 17) * N(2, 0) + N(1, 2) * N(2, 17) + N(1, 5) * N(2, 14) - N(1, 14) * N(2, 5) - N(1, 17) * N(2, 2), N(1, 13) * N(2, 5) - N(1, 2) * N(2, 16) - N(1, 4) * N(2, 14) - N(1, 5) * N(2, 13) - N(1, 1) * N(2, 17) + N(1, 14) * N(2, 4) + N(1, 16) * N(2, 2) + N(1, 17) * N(2, 1), N(1, 14) * N(2, 5) - N(1, 5) * N(2, 14) - N(1, 2) * N(2, 17) + N(1, 17) * N(2, 2), N(1, 15) * N(2, 5) - N(1, 4) * N(2, 16) - N(1, 5) * N(2, 15) - N(1, 3) * N(2, 17) + N(1, 16) * N(2, 4) + N(1, 17) * N(2, 3) + N(1, 5) * N(2, 17) - N(1, 17) * N(2, 5), N(1, 16) * N(2, 5) - N(1, 5) * N(2, 16) - N(1, 4) * N(2, 17) + N(1, 17) * N(2, 4), N(1, 17) * N(2, 5) - N(1, 5) * N(2, 17);
    
    D21 << N(1, 6) * D(0, 0), N(1, 6) * D(0, 1) + N(1, 7) * D(0, 0), N(1, 6) * D(0, 2) + N(1, 7) * D(0, 1) + N(1, 8) * D(0, 0), N(1, 7) * D(0, 2) + N(1, 8) * D(0, 1), N(1, 8) * D(0, 2), N(1, 6) * D(0, 3) + N(1, 9) * D(0, 0), N(1, 6) * D(0, 4) + N(1, 7) * D(0, 3) + N(1, 9) * D(0, 1) + N(1, 10) * D(0, 0), N(1, 6) * D(0, 5) + N(1, 7) * D(0, 4) + N(1, 8) * D(0, 3) + N(1, 9) * D(0, 2) + N(1, 10) * D(0, 1) + N(1, 11) * D(0, 0), N(1, 7) * D(0, 5) + N(1, 8) * D(0, 4) + N(1, 10) * D(0, 2) + N(1, 11) * D(0, 1), N(1, 8) * D(0, 5) + N(1, 11) * D(0, 2), N(1, 6) * D(0, 6) + N(1, 9) * D(0, 3), N(1, 6) * D(0, 7) + N(1, 7) * D(0, 6) + N(1, 9) * D(0, 4) + N(1, 10) * D(0, 3), N(1, 6) * D(0, 8) + N(1, 7) * D(0, 7) + N(1, 8) * D(0, 6) + N(1, 9) * D(0, 5) + N(1, 10) * D(0, 4) + N(1, 11) * D(0, 3), N(1, 7) * D(0, 8) + N(1, 8) * D(0, 7) + N(1, 10) * D(0, 5) + N(1, 11) * D(0, 4), N(1, 8) * D(0, 8) + N(1, 11) * D(0, 5);
    
    D22 << N(2, 6) * D(1, 0), N(2, 6) * D(1, 1) + N(2, 7) * D(1, 0), N(2, 6) * D(1, 2) + N(2, 7) * D(1, 1) + N(2, 8) * D(1, 0), N(2, 7) * D(1, 2) + N(2, 8) * D(1, 1), N(2, 8) * D(1, 2), N(2, 6) * D(1, 3) + N(2, 9) * D(1, 0), N(2, 6) * D(1, 4) + N(2, 7) * D(1, 3) + N(2, 9) * D(1, 1) + N(2, 10) * D(1, 0), N(2, 6) * D(1, 5) + N(2, 7) * D(1, 4) + N(2, 8) * D(1, 3) + N(2, 9) * D(1, 2) + N(2, 10) * D(1, 1) + N(2, 11) * D(1, 0), N(2, 7) * D(1, 5) + N(2, 8) * D(1, 4) + N(2, 10) * D(1, 2) + N(2, 11) * D(1, 1), N(2, 8) * D(1, 5) + N(2, 11) * D(1, 2), N(2, 6) * D(1, 6) + N(2, 9) * D(1, 3), N(2, 6) * D(1, 7) + N(2, 7) * D(1, 6) + N(2, 9) * D(1, 4) + N(2, 10) * D(1, 3), N(2, 6) * D(1, 8) + N(2, 7) * D(1, 7) + N(2, 8) * D(1, 6) + N(2, 9) * D(1, 5) + N(2, 10) * D(1, 4) + N(2, 11) * D(1, 3), N(2, 7) * D(1, 8) + N(2, 8) * D(1, 7) + N(2, 10) * D(1, 5) + N(2, 11) * D(1, 4), N(2, 8) * D(1, 8) + N(2, 11) * D(1, 5);
    
    D23 << N(0, 6) * D(2, 0), N(0, 6) * D(2, 1) + N(0, 7) * D(2, 0), N(0, 6) * D(2, 2) + N(0, 7) * D(2, 1) + N(0, 8) * D(2, 0), N(0, 7) * D(2, 2) + N(0, 8) * D(2, 1), N(0, 8) * D(2, 2), N(0, 6) * D(2, 3) + N(0, 9) * D(2, 0), N(0, 6) * D(2, 4) + N(0, 7) * D(2, 3) + N(0, 9) * D(2, 1) + N(0, 10) * D(2, 0), N(0, 6) * D(2, 5) + N(0, 7) * D(2, 4) + N(0, 8) * D(2, 3) + N(0, 9) * D(2, 2) + N(0, 10) * D(2, 1) + N(0, 11) * D(2, 0), N(0, 7) * D(2, 5) + N(0, 8) * D(2, 4) + N(0, 10) * D(2, 2) + N(0, 11) * D(2, 1), N(0, 8) * D(2, 5) + N(0, 11) * D(2, 2), N(0, 6) * D(2, 6) + N(0, 9) * D(2, 3), N(0, 6) * D(2, 7) + N(0, 7) * D(2, 6) + N(0, 9) * D(2, 4) + N(0, 10) * D(2, 3), N(0, 6) * D(2, 8) + N(0, 7) * D(2, 7) + N(0, 8) * D(2, 6) + N(0, 9) * D(2, 5) + N(0, 10) * D(2, 4) + N(0, 11) * D(2, 3), N(0, 7) * D(2, 8) + N(0, 8) * D(2, 7) + N(0, 10) * D(2, 5) + N(0, 11) * D(2, 4), N(0, 8) * D(2, 8) + N(0, 11) * D(2, 5);
    
    D2.row(1) = D21 + D22 + D23;
    
    N.row(0) = M.row(0);
    N.row(1) = M.row(1);
    N.row(2) = M.row(3);
    D << N(0, 0) * N(2, 14) + N(0, 1) * N(2, 13) + N(0, 2) * N(2, 12) - N(0, 12) * N(2, 2) - N(0, 13) * N(2, 1) - N(0, 14) * N(2, 0) - N(0, 2) * N(2, 14) + N(0, 14) * N(2, 2), N(0, 1) * N(2, 14) + N(0, 2) * N(2, 13) - N(0, 13) * N(2, 2) - N(0, 14) * N(2, 1), N(0, 2) * N(2, 14) - N(0, 14) * N(2, 2), N(0, 0) * N(2, 17) + N(0, 1) * N(2, 16) + N(0, 2) * N(2, 15) + N(0, 3) * N(2, 14) + N(0, 4) * N(2, 13) + N(0, 5) * N(2, 12) - N(0, 12) * N(2, 5) - N(0, 13) * N(2, 4) - N(0, 14) * N(2, 3) - N(0, 15) * N(2, 2) - N(0, 16) * N(2, 1) - N(0, 17) * N(2, 0) - N(0, 2) * N(2, 17) - N(0, 5) * N(2, 14) + N(0, 14) * N(2, 5) + N(0, 17) * N(2, 2), N(0, 1) * N(2, 17) + N(0, 2) * N(2, 16) + N(0, 4) * N(2, 14) + N(0, 5) * N(2, 13) - N(0, 13) * N(2, 5) - N(0, 14) * N(2, 4) - N(0, 16) * N(2, 2) - N(0, 17) * N(2, 1), N(0, 2) * N(2, 17) + N(0, 5) * N(2, 14) - N(0, 14) * N(2, 5) - N(0, 17) * N(2, 2), N(0, 3) * N(2, 17) + N(0, 4) * N(2, 16) + N(0, 5) * N(2, 15) - N(0, 15) * N(2, 5) - N(0, 16) * N(2, 4) - N(0, 17) * N(2, 3) - N(0, 5) * N(2, 17) + N(0, 17) * N(2, 5), N(0, 4) * N(2, 17) + N(0, 5) * N(2, 16) - N(0, 16) * N(2, 5) - N(0, 17) * N(2, 4), N(0, 5) * N(2, 17) - N(0, 17) * N(2, 5),
            N(0, 12) * N(1, 2) - N(0, 1) * N(1, 13) - N(0, 2) * N(1, 12) - N(0, 0) * N(1, 14) + N(0, 13) * N(1, 1) + N(0, 14) * N(1, 0) + N(0, 2) * N(1, 14) - N(0, 14) * N(1, 2), N(0, 13) * N(1, 2) - N(0, 2) * N(1, 13) - N(0, 1) * N(1, 14) + N(0, 14) * N(1, 1), N(0, 14) * N(1, 2) - N(0, 2) * N(1, 14), N(0, 12) * N(1, 5) - N(0, 1) * N(1, 16) - N(0, 2) * N(1, 15) - N(0, 3) * N(1, 14) - N(0, 4) * N(1, 13) - N(0, 5) * N(1, 12) - N(0, 0) * N(1, 17) + N(0, 13) * N(1, 4) + N(0, 14) * N(1, 3) + N(0, 15) * N(1, 2) + N(0, 16) * N(1, 1) + N(0, 17) * N(1, 0) + N(0, 2) * N(1, 17) + N(0, 5) * N(1, 14) - N(0, 14) * N(1, 5) - N(0, 17) * N(1, 2), N(0, 13) * N(1, 5) - N(0, 2) * N(1, 16) - N(0, 4) * N(1, 14) - N(0, 5) * N(1, 13) - N(0, 1) * N(1, 17) + N(0, 14) * N(1, 4) + N(0, 16) * N(1, 2) + N(0, 17) * N(1, 1), N(0, 14) * N(1, 5) - N(0, 5) * N(1, 14) - N(0, 2) * N(1, 17) + N(0, 17) * N(1, 2), N(0, 15) * N(1, 5) - N(0, 4) * N(1, 16) - N(0, 5) * N(1, 15) - N(0, 3) * N(1, 17) + N(0, 16) * N(1, 4) + N(0, 17) * N(1, 3) + N(0, 5) * N(1, 17) - N(0, 17) * N(1, 5), N(0, 16) * N(1, 5) - N(0, 5) * N(1, 16) - N(0, 4) * N(1, 17) + N(0, 17) * N(1, 4), N(0, 17) * N(1, 5) - N(0, 5) * N(1, 17),
            N(1, 12) * N(2, 2) - N(1, 1) * N(2, 13) - N(1, 2) * N(2, 12) - N(1, 0) * N(2, 14) + N(1, 13) * N(2, 1) + N(1, 14) * N(2, 0) + N(1, 2) * N(2, 14) - N(1, 14) * N(2, 2), N(1, 13) * N(2, 2) - N(1, 2) * N(2, 13) - N(1, 1) * N(2, 14) + N(1, 14) * N(2, 1), N(1, 14) * N(2, 2) - N(1, 2) * N(2, 14), N(1, 12) * N(2, 5) - N(1, 1) * N(2, 16) - N(1, 2) * N(2, 15) - N(1, 3) * N(2, 14) - N(1, 4) * N(2, 13) - N(1, 5) * N(2, 12) - N(1, 0) * N(2, 17) + N(1, 13) * N(2, 4) + N(1, 14) * N(2, 3) + N(1, 15) * N(2, 2) + N(1, 16) * N(2, 1) + N(1, 17) * N(2, 0) + N(1, 2) * N(2, 17) + N(1, 5) * N(2, 14) - N(1, 14) * N(2, 5) - N(1, 17) * N(2, 2), N(1, 13) * N(2, 5) - N(1, 2) * N(2, 16) - N(1, 4) * N(2, 14) - N(1, 5) * N(2, 13) - N(1, 1) * N(2, 17) + N(1, 14) * N(2, 4) + N(1, 16) * N(2, 2) + N(1, 17) * N(2, 1), N(1, 14) * N(2, 5) - N(1, 5) * N(2, 14) - N(1, 2) * N(2, 17) + N(1, 17) * N(2, 2), N(1, 15) * N(2, 5) - N(1, 4) * N(2, 16) - N(1, 5) * N(2, 15) - N(1, 3) * N(2, 17) + N(1, 16) * N(2, 4) + N(1, 17) * N(2, 3) + N(1, 5) * N(2, 17) - N(1, 17) * N(2, 5), N(1, 16) * N(2, 5) - N(1, 5) * N(2, 16) - N(1, 4) * N(2, 17) + N(1, 17) * N(2, 4), N(1, 17) * N(2, 5) - N(1, 5) * N(2, 17);
    
    D21 << N(1, 6) * D(0, 0), N(1, 6) * D(0, 1) + N(1, 7) * D(0, 0), N(1, 6) * D(0, 2) + N(1, 7) * D(0, 1) + N(1, 8) * D(0, 0), N(1, 7) * D(0, 2) + N(1, 8) * D(0, 1), N(1, 8) * D(0, 2), N(1, 6) * D(0, 3) + N(1, 9) * D(0, 0), N(1, 6) * D(0, 4) + N(1, 7) * D(0, 3) + N(1, 9) * D(0, 1) + N(1, 10) * D(0, 0), N(1, 6) * D(0, 5) + N(1, 7) * D(0, 4) + N(1, 8) * D(0, 3) + N(1, 9) * D(0, 2) + N(1, 10) * D(0, 1) + N(1, 11) * D(0, 0), N(1, 7) * D(0, 5) + N(1, 8) * D(0, 4) + N(1, 10) * D(0, 2) + N(1, 11) * D(0, 1), N(1, 8) * D(0, 5) + N(1, 11) * D(0, 2), N(1, 6) * D(0, 6) + N(1, 9) * D(0, 3), N(1, 6) * D(0, 7) + N(1, 7) * D(0, 6) + N(1, 9) * D(0, 4) + N(1, 10) * D(0, 3), N(1, 6) * D(0, 8) + N(1, 7) * D(0, 7) + N(1, 8) * D(0, 6) + N(1, 9) * D(0, 5) + N(1, 10) * D(0, 4) + N(1, 11) * D(0, 3), N(1, 7) * D(0, 8) + N(1, 8) * D(0, 7) + N(1, 10) * D(0, 5) + N(1, 11) * D(0, 4), N(1, 8) * D(0, 8) + N(1, 11) * D(0, 5);
    
    D22 << N(2, 6) * D(1, 0), N(2, 6) * D(1, 1) + N(2, 7) * D(1, 0), N(2, 6) * D(1, 2) + N(2, 7) * D(1, 1) + N(2, 8) * D(1, 0), N(2, 7) * D(1, 2) + N(2, 8) * D(1, 1), N(2, 8) * D(1, 2), N(2, 6) * D(1, 3) + N(2, 9) * D(1, 0), N(2, 6) * D(1, 4) + N(2, 7) * D(1, 3) + N(2, 9) * D(1, 1) + N(2, 10) * D(1, 0), N(2, 6) * D(1, 5) + N(2, 7) * D(1, 4) + N(2, 8) * D(1, 3) + N(2, 9) * D(1, 2) + N(2, 10) * D(1, 1) + N(2, 11) * D(1, 0), N(2, 7) * D(1, 5) + N(2, 8) * D(1, 4) + N(2, 10) * D(1, 2) + N(2, 11) * D(1, 1), N(2, 8) * D(1, 5) + N(2, 11) * D(1, 2), N(2, 6) * D(1, 6) + N(2, 9) * D(1, 3), N(2, 6) * D(1, 7) + N(2, 7) * D(1, 6) + N(2, 9) * D(1, 4) + N(2, 10) * D(1, 3), N(2, 6) * D(1, 8) + N(2, 7) * D(1, 7) + N(2, 8) * D(1, 6) + N(2, 9) * D(1, 5) + N(2, 10) * D(1, 4) + N(2, 11) * D(1, 3), N(2, 7) * D(1, 8) + N(2, 8) * D(1, 7) + N(2, 10) * D(1, 5) + N(2, 11) * D(1, 4), N(2, 8) * D(1, 8) + N(2, 11) * D(1, 5);
    
    D23 << N(0, 6) * D(2, 0), N(0, 6) * D(2, 1) + N(0, 7) * D(2, 0), N(0, 6) * D(2, 2) + N(0, 7) * D(2, 1) + N(0, 8) * D(2, 0), N(0, 7) * D(2, 2) + N(0, 8) * D(2, 1), N(0, 8) * D(2, 2), N(0, 6) * D(2, 3) + N(0, 9) * D(2, 0), N(0, 6) * D(2, 4) + N(0, 7) * D(2, 3) + N(0, 9) * D(2, 1) + N(0, 10) * D(2, 0), N(0, 6) * D(2, 5) + N(0, 7) * D(2, 4) + N(0, 8) * D(2, 3) + N(0, 9) * D(2, 2) + N(0, 10) * D(2, 1) + N(0, 11) * D(2, 0), N(0, 7) * D(2, 5) + N(0, 8) * D(2, 4) + N(0, 10) * D(2, 2) + N(0, 11) * D(2, 1), N(0, 8) * D(2, 5) + N(0, 11) * D(2, 2), N(0, 6) * D(2, 6) + N(0, 9) * D(2, 3), N(0, 6) * D(2, 7) + N(0, 7) * D(2, 6) + N(0, 9) * D(2, 4) + N(0, 10) * D(2, 3), N(0, 6) * D(2, 8) + N(0, 7) * D(2, 7) + N(0, 8) * D(2, 6) + N(0, 9) * D(2, 5) + N(0, 10) * D(2, 4) + N(0, 11) * D(2, 3), N(0, 7) * D(2, 8) + N(0, 8) * D(2, 7) + N(0, 10) * D(2, 5) + N(0, 11) * D(2, 4), N(0, 8) * D(2, 8) + N(0, 11) * D(2, 5);
    
    D2.row(2) = D21 + D22 + D23;
    
    Eigen::Matrix<double, 3, 3> C0;
    C0.col(0) = D2.col(0);
    C0.col(1) = D2.col(5);
    C0.col(2) = D2.col(10);
    
    Eigen::Matrix<double, 3, 3> C1;
    C1.col(0) = D2.col(1);
    C1.col(1) = D2.col(6);
    C1.col(2) = D2.col(11);
    
    Eigen::Matrix<double, 3, 3> C2;
    C2.col(0) = D2.col(2);
    C2.col(1) = D2.col(7);
    C2.col(2) = D2.col(12);
    
    Eigen::Matrix<double, 3, 3> C3;
    C3.col(0) = D2.col(3);
    C3.col(1) = D2.col(8);
    C3.col(2) = D2.col(13);
    
    Eigen::Matrix<double, 3, 3> C4;
    C4.col(0) = D2.col(4);
    C4.col(1) = D2.col(9);
    C4.col(2) = D2.col(14);
    
    Eigen::MatrixXd Cc(3, 12);
    Cc << C0, C1, C2, C3;
    Cc = (-C4.partialPivLu().solve(Cc)).eval();
    
    Eigen::MatrixXd Dd = MatrixXd::Zero(12, 12);
    Dd(0, 3) = 1;
    Dd(1, 4) = 1;
    Dd(2, 5) = 1;
    Dd(3, 6) = 1;
    Dd(4, 7) = 1;
    Dd(5, 8) = 1;
    Dd(6, 9) = 1;
    Dd(7, 10) = 1;
    Dd(8, 11) = 1;
    Dd.block<3, 12>(9, 0) = Cc;
    
    RealSchur<MatrixXd> schur(12);
    schur.compute(Dd, false);
    MatrixXd sols_o = MatrixXd::Zero(1, 12);
    MatrixXd S = schur.matrixT();
    int k = 0;
    for (int i = 0; i < 11; i++)
    {
        if ((S(i, i) > -1) && (S(i, i) < 1) && (S(i + 1, i) == 0))
        {
            sols_o(0, k) = S(i, i);
            k++;
        }
    }
    if ((S(11, 11) > 0) && (S(10, 11) == 0))
    {
        sols_o(0, k) = S(11, 11);
        k++;
    }
    
    MatrixXd U = MatrixXd::Zero(3, 3);
    MatrixXd V = MatrixXd::Zero(2, 1);
    
    MatrixXd sols = MatrixXd::Zero(2, k);
    int m = 0;
    double sigma;
    
    for (int i = 0; i < k; i++)
    {
        sigma = sols_o(0, i);
        U = sigma * sigma * sigma * sigma * C4 + sigma * sigma * sigma * C3 + sigma * sigma * C2 + sigma * C1 + C0;
        V = -U.block<2, 2>(0, 1).partialPivLu().solve(U.block<2, 1>(0, 0));
        if ((V(0, 0) > 0) && (fabs(V(1, 0) - V(0, 0) * V(0, 0)) < 0.01 * V(1, 0)))
        {
            sols(0, m) = sigma;  
            sols(1, m) = V(0, 0);
            m++;
        }
    }
    
    sols.conservativeResize(2, m);
    
    return sols;
}

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
    const VectorXd data = Map<const VectorXd>(mxGetPr(prhs[0]), 27);
    MatrixXd sols = solver_e4f_polyeig(data);
    plhs[0] = mxCreateDoubleMatrix(sols.rows(), sols.cols(), mxREAL);
    double *zr = mxGetPr(plhs[0]);
    for (Index i = 0; i < sols.size(); i++)
    {
        zr[i] = sols(i);
    }
}
